// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chessEngine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chessEngine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chessEngine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chessEngine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chessEngine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chessEngine_2eproto;
namespace chessEngine {
class fenRequest;
struct fenRequestDefaultTypeInternal;
extern fenRequestDefaultTypeInternal _fenRequest_default_instance_;
class moveResponse;
struct moveResponseDefaultTypeInternal;
extern moveResponseDefaultTypeInternal _moveResponse_default_instance_;
}  // namespace chessEngine
PROTOBUF_NAMESPACE_OPEN
template<> ::chessEngine::fenRequest* Arena::CreateMaybeMessage<::chessEngine::fenRequest>(Arena*);
template<> ::chessEngine::moveResponse* Arena::CreateMaybeMessage<::chessEngine::moveResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chessEngine {

// ===================================================================

class fenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessEngine.fenRequest) */ {
 public:
  inline fenRequest() : fenRequest(nullptr) {}
  ~fenRequest() override;
  explicit constexpr fenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  fenRequest(const fenRequest& from);
  fenRequest(fenRequest&& from) noexcept
    : fenRequest() {
    *this = ::std::move(from);
  }

  inline fenRequest& operator=(const fenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline fenRequest& operator=(fenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const fenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const fenRequest* internal_default_instance() {
    return reinterpret_cast<const fenRequest*>(
               &_fenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(fenRequest& a, fenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(fenRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fenRequest* New() const final {
    return new fenRequest();
  }

  fenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const fenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const fenRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessEngine.fenRequest";
  }
  protected:
  explicit fenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFenFieldNumber = 1,
  };
  // string fen = 1;
  void clear_fen();
  const std::string& fen() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fen(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fen();
  PROTOBUF_MUST_USE_RESULT std::string* release_fen();
  void set_allocated_fen(std::string* fen);
  private:
  const std::string& _internal_fen() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fen(const std::string& value);
  std::string* _internal_mutable_fen();
  public:

  // @@protoc_insertion_point(class_scope:chessEngine.fenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chessEngine_2eproto;
};
// -------------------------------------------------------------------

class moveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chessEngine.moveResponse) */ {
 public:
  inline moveResponse() : moveResponse(nullptr) {}
  ~moveResponse() override;
  explicit constexpr moveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  moveResponse(const moveResponse& from);
  moveResponse(moveResponse&& from) noexcept
    : moveResponse() {
    *this = ::std::move(from);
  }

  inline moveResponse& operator=(const moveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline moveResponse& operator=(moveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const moveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const moveResponse* internal_default_instance() {
    return reinterpret_cast<const moveResponse*>(
               &_moveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(moveResponse& a, moveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(moveResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(moveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline moveResponse* New() const final {
    return new moveResponse();
  }

  moveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<moveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const moveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const moveResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(moveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chessEngine.moveResponse";
  }
  protected:
  explicit moveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveFieldNumber = 1,
  };
  // string move = 1;
  void clear_move();
  const std::string& move() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_move(ArgT0&& arg0, ArgT... args);
  std::string* mutable_move();
  PROTOBUF_MUST_USE_RESULT std::string* release_move();
  void set_allocated_move(std::string* move);
  private:
  const std::string& _internal_move() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_move(const std::string& value);
  std::string* _internal_mutable_move();
  public:

  // @@protoc_insertion_point(class_scope:chessEngine.moveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr move_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chessEngine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// fenRequest

// string fen = 1;
inline void fenRequest::clear_fen() {
  fen_.ClearToEmpty();
}
inline const std::string& fenRequest::fen() const {
  // @@protoc_insertion_point(field_get:chessEngine.fenRequest.fen)
  return _internal_fen();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void fenRequest::set_fen(ArgT0&& arg0, ArgT... args) {
 
 fen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chessEngine.fenRequest.fen)
}
inline std::string* fenRequest::mutable_fen() {
  std::string* _s = _internal_mutable_fen();
  // @@protoc_insertion_point(field_mutable:chessEngine.fenRequest.fen)
  return _s;
}
inline const std::string& fenRequest::_internal_fen() const {
  return fen_.Get();
}
inline void fenRequest::_internal_set_fen(const std::string& value) {
  
  fen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* fenRequest::_internal_mutable_fen() {
  
  return fen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* fenRequest::release_fen() {
  // @@protoc_insertion_point(field_release:chessEngine.fenRequest.fen)
  return fen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void fenRequest::set_allocated_fen(std::string* fen) {
  if (fen != nullptr) {
    
  } else {
    
  }
  fen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fen,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chessEngine.fenRequest.fen)
}

// -------------------------------------------------------------------

// moveResponse

// string move = 1;
inline void moveResponse::clear_move() {
  move_.ClearToEmpty();
}
inline const std::string& moveResponse::move() const {
  // @@protoc_insertion_point(field_get:chessEngine.moveResponse.move)
  return _internal_move();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void moveResponse::set_move(ArgT0&& arg0, ArgT... args) {
 
 move_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chessEngine.moveResponse.move)
}
inline std::string* moveResponse::mutable_move() {
  std::string* _s = _internal_mutable_move();
  // @@protoc_insertion_point(field_mutable:chessEngine.moveResponse.move)
  return _s;
}
inline const std::string& moveResponse::_internal_move() const {
  return move_.Get();
}
inline void moveResponse::_internal_set_move(const std::string& value) {
  
  move_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* moveResponse::_internal_mutable_move() {
  
  return move_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* moveResponse::release_move() {
  // @@protoc_insertion_point(field_release:chessEngine.moveResponse.move)
  return move_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void moveResponse::set_allocated_move(std::string* move) {
  if (move != nullptr) {
    
  } else {
    
  }
  move_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), move,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chessEngine.moveResponse.move)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chessEngine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chessEngine_2eproto
